---
- name: Set hostname
  hostname:
    name: "{{  hostvars[inventory_hostname]['ansible_hostname'] }}"

- name: Install OS dependencies
  yum:
    name:
      - socat
      - conntrack
      - ipset
      - unzip
      - bzip2
    state: installed

- name: Turn off swap
  command: swapoff -a

- name: Disable swap
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: Download CNI
  unarchive:
    src: https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz
    remote_src: yes
    dest: /opt/cni/bin/
    mode: u+x
    owner: root
    group: root

- name: Create the bridge and loopback network configuration files
  copy:
    src: worker/cni/
    dest: /etc/cni/net.d/

- name: Download crictl
  unarchive:
    src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz
    remote_src: yes
    dest: /usr/local/bin/
    mode: u+x
    owner: root
    group: root

- name: Download runc
  get_url:
    url: https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64
    dest: /usr/local/bin/runc
    mode: u+x
    owner: root

- name: Download containerd
  unarchive:
    src: https://github.com/containerd/containerd/releases/download/v1.4.4/containerd-1.4.4-linux-amd64.tar.gz
    remote_src: yes
    dest: /bin/
    owner: root
    group: root
    extra_opts: [--strip-components=1]

- name: Create containerd directory
  file:
    path: /etc/containerd/
    state: directory

- name: Create containerd config
  template:
    src: worker/config.toml
    dest: /etc/containerd/config.toml

- name: Create containerd service
  template:
    src: worker/containerd.service
    dest: /etc/systemd/system/containerd.service

- name: Enable and start containerd service
  systemd:
    name: containerd
    enabled: yes
    daemon_reload: yes
    state: started

- name: Download Kubelet
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v{{ kubernetes_version }}/bin/linux/amd64/kubelet
    dest: /usr/local/bin/
    mode: u+x

- name: Copy Kubelet key
  copy:
    src: worker/kubelet/{{ item }}
    dest: /var/lib/kubelet/
  with_items:
    - "{{  hostvars[inventory_hostname]['ansible_hostname'] }}.key"
    - "{{  hostvars[inventory_hostname]['ansible_hostname'] }}.crt"

- name: Copy Kubelet config
  copy:
    src: worker/{{ hostvars[inventory_hostname]['ansible_hostname'] }}.kubeconfig
    dest: /var/lib/kubelet/kubeconfig

- name: Copy CA certificate
  copy:
    src: keys/kubernetes/ca.crt
    dest: /var/lib/kubernetes/

- name: Create Kubelet config YAML
  template:
    src: worker/kubelet-config.yaml
    dest: /var/lib/kubelet/kubelet-config.yaml

- name: Create Kubelet service
  template:
    src: worker/kubelet.service
    dest: /etc/systemd/system/kubelet.service

- name: Enable and start Kubelet
  systemd:
    name: kubelet
    enabled: yes
    daemon_reload: yes
    state: started

- name: Download Kube-proxy
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v{{ kubernetes_version }}/bin/linux/amd64/kube-proxy
    dest: /usr/local/bin/
    mode: u+x

- name: Create Kube Proxy config directory
  file:
    path: /var/lib/kube-proxy/
    state: directory

- name: Copy Kube Proxy kubeconfig
  copy:
    src: worker/kube-proxy.kubeconfig
    dest: /var/lib/kube-proxy/kubeconfig

- name: Copy Kube Proxy config
  copy:
    src: worker/kube-proxy-config.yaml
    dest: /var/lib/kube-proxy/kube-proxy-config.yaml

- name: Copy Kube Proxy service
  copy:
    src: worker/kube-proxy.service
    dest: /etc/systemd/system/kube-proxy.service

- name: Enable and start Kube Proxy
  systemd:
    name: kube-proxy
    enabled: yes
    daemon_reload: yes
    state: started 

- name: Download kubectl
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v{{ kubernetes_version }}/bin/linux/amd64/kubectl
    dest: /usr/local/bin/
    mode: u+x
